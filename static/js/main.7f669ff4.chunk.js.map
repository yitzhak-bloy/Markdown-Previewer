{"version":3,"sources":["initialtext.js","MarkdownPreviewer.jsx","App.js","serviceWorker.js","index.js"],"names":["initialText","marked","setOptions","breaks","renderer","Renderer","link","href","text","MarkdownPreviewer","props","handleChange","event","setState","inputString","target","value","state","this","className","id","onChange","dangerouslySetInnerHTML","__html","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAoCeA,EApCE,wpC,sBCKjBC,IAAOC,WAAW,CACjBC,QAAQ,IAGT,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAASC,EAAMC,GAC7B,MAAM,2BAAN,OAAkCD,EAAlC,YAA0CC,EAA1C,S,IAgCaC,E,YA5Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,SAACC,GAChB,EAAKC,SAAS,CACVC,YAAaF,EAAMG,OAAOC,SAP5B,EAAKC,MAAQ,CACXH,YAAad,GAHE,E,sEAcT,IACDc,EAAgBI,KAAKD,MAArBH,YACP,OACE,6BACE,kDACA,yBAAKK,UAAU,YACb,8BAAUC,GAAG,SAASJ,MAAOF,EAAaO,SAAUH,KAAKP,eACzD,yBAAKS,GAAG,UAAUE,wBAAyB,CAACC,OAAQtB,IAAOa,EAAa,CAAEV,sB,GAtBpDoB,a,MCFjBC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7f669ff4.chunk.js","sourcesContent":["const initialText = `# Welcome to my React Markdown Previewer!\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\\`\\`\\`\r\n// this is multi-line code:\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\nAnd if you want to get really crazy, even tables:\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n![React Logo w/ Text](https://goo.gl/Umyytc)`\r\n\r\nexport default initialText;","import React, { Component } from 'react';\r\nimport initialText from './initialtext'\r\nimport marked from 'marked';\r\nimport './MarkdownPreviewer.css';\r\n\r\nmarked.setOptions({ \r\n\tbreaks: true\r\n})\r\n\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function(href, text) {\r\n  return `<a target=\"_blank\" href=${href}>${text}</a>`;\r\n};\r\n\r\nclass MarkdownPreviewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputString: initialText,\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n\t\tthis.setState({\r\n      inputString: event.target.value,\r\n    \t});\r\n  }\r\n\r\n\r\n  render() {\r\n    const {inputString } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Markdown Previewer</h1>\r\n        <div className='twoboxes'>\r\n          <textarea id=\"editor\" value={inputString} onChange={this.handleChange} />\r\n          <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(inputString, { renderer })}} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n} \r\n\r\nexport default MarkdownPreviewer;","import React from 'react';\nimport MarkdownPreviewer  from './MarkdownPreviewer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MarkdownPreviewer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}